{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst datetimePicker = document.getElementById(\"datetime-picker\");\nconst startButton = document.querySelector(\"[data-start]\");\nconst timerFields = {\n  days: document.querySelector(\"[data-days]\"),\n  hours: document.querySelector(\"[data-hours]\"),\n  minutes: document.querySelector(\"[data-minutes]\"),\n  seconds: document.querySelector(\"[data-seconds]\"),\n};\n\nlet userSelectedDate;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate < new Date()) {\n      iziToast.error({\n        title: \"Error\",\n        message: \"Please choose a date in the future\",\n      });\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n      userSelectedDate = selectedDate;\n    }\n  },\n};\n\nflatpickr(\"#datetime-picker\", options);\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, \"0\");\n}\n\nfunction updateTimerDisplay(ms) {\n  const { days, hours, minutes, seconds } = convertMs(ms);\n  timerFields.days.textContent = addLeadingZero(days);\n  timerFields.hours.textContent = addLeadingZero(hours);\n  timerFields.minutes.textContent = addLeadingZero(minutes);\n  timerFields.seconds.textContent = addLeadingZero(seconds);\n}\n\nfunction startCountdown() {\n  startButton.disabled = true;\n\n  const intervalId = setInterval(() => {\n    const currentTime = new Date();\n    const timeDifference = userSelectedDate - currentTime;\n\n    if (timeDifference <= 0) {\n      clearInterval(intervalId);\n      updateTimerDisplay(0);\n      iziToast.success({\n        title: \"Countdown Complete\",\n        message: \"The countdown has reached zero!\",\n      });\n    } else {\n      updateTimerDisplay(timeDifference);\n    }\n  }, 1000);\n}\n\nstartButton.addEventListener(\"click\", startCountdown);\n"],"names":["startButton","timerFields","userSelectedDate","options","selectedDates","selectedDate","iziToast","flatpickr","addLeadingZero","value","updateTimerDisplay","ms","days","hours","minutes","seconds","startCountdown","intervalId","currentTime","timeDifference"],"mappings":"2GAKuB,SAAS,eAAe,iBAAiB,EAChE,MAAMA,EAAc,SAAS,cAAc,cAAc,EACnDC,EAAc,CAClB,KAAM,SAAS,cAAc,aAAa,EAC1C,MAAO,SAAS,cAAc,cAAc,EAC5C,QAAS,SAAS,cAAc,gBAAgB,EAChD,QAAS,SAAS,cAAc,gBAAgB,CAClD,EAEA,IAAIC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,GAC/BC,EAAe,IAAI,MACrBC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,EACDN,EAAY,SAAW,KAEvBA,EAAY,SAAW,GACvBE,EAAmBG,EAEtB,CACH,EAEAE,EAAU,mBAAoBJ,CAAO,EAErC,SAASK,EAAeC,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC,CAEA,SAASC,EAAmBC,EAAI,CAC9B,KAAM,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAY,UAAUJ,CAAE,EACtDV,EAAY,KAAK,YAAcO,EAAeI,CAAI,EAClDX,EAAY,MAAM,YAAcO,EAAeK,CAAK,EACpDZ,EAAY,QAAQ,YAAcO,EAAeM,CAAO,EACxDb,EAAY,QAAQ,YAAcO,EAAeO,CAAO,CAC1D,CAEA,SAASC,GAAiB,CACxBhB,EAAY,SAAW,GAEvB,MAAMiB,EAAa,YAAY,IAAM,CACnC,MAAMC,EAAc,IAAI,KAClBC,EAAiBjB,EAAmBgB,EAEtCC,GAAkB,GACpB,cAAcF,CAAU,EACxBP,EAAmB,CAAC,EACpBJ,EAAS,QAAQ,CACf,MAAO,qBACP,QAAS,iCACjB,CAAO,GAEDI,EAAmBS,CAAc,CAEpC,EAAE,GAAI,CACT,CAEAnB,EAAY,iBAAiB,QAASgB,CAAc"}